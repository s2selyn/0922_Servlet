<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>AJAX</title>
</head>
<body>

	<h1>AJAX</h1>
	
	<h2>아주중요!!! 별이 다섯개!!! ★★★★★</h2>
	
	<pre>
		AJAX == Asynchronous JavaScript And XML
		비동기식 자바스크립트와 XML
		(Synchronous면 동기식)
		
		"페이지를 새로고침 하지않고 서버와 데이터를 주고받을 수 있는 기술"
		"비동기 통신"
		(여태 사용한 a태그, form태그, location.href 전부 동기식 통신, 요청, 서버와 동기화시켜서 작업을 처리함)
		(화면이 깜빡이지 않고 부드럽게~ 통신하고 일부만 변경됨, 좋은 점은 사용자경험(User Experience, UX) 향상)
		<%-- 한 2000년만 해도 화면이 렌더링도 느리고 progress bar가 진행되면서 다 뜰때까지 기다려야하고 아무것도 못했음, 한줄씩 나온다 위에서부터 렌더링하니까
		사용자경험이 좋지않음, 하염없이 기다림, 불편해서 바로바로 안되니까 마이크로소프트가 내놓은게 액티브 X, 비동기통신의 시초
		그때만해도 ajax 유행이 안되다가 5, 6년 지나서 구글이 낸게 google map을 내놓았다(2005 ~ 2006)
		이것때문에 전세계 웹개발자가 허거덩, 마우스 눌러서 하는거 전부 select, db에서 조회하기, url로 요청보내서 응답받고 화면에 뿌려야하는데 그냥 끌어다놓고 클릭만으로도 바뀌어버림
		이거 내면서 자동완성을 구글이 낸것, 이것도 select임 자기네들 키워드 들어있는것 보여주는거
		Active X 안쓰고 AJAX 썼다고 해서 전세계가 미추어버린것, 이 이후로 브라우저 점유율도 바뀌고...
		AJAX는 그래도 일반 개발자들이 쓰기 어려운 기술이었다(2005년에 나왔음)
		근데 2006년에 jQuery가 나와버림, 존 레식씨가 AJAX를 쓰기 쉽게 만들어버림, jQ인기도 AJAX때문이라고 할수도있음...
		너도나도쓰자해서 2008년도에 HTML5에 AJAX를 포함시켜버림, 근데 문법이 어려움, jQ로 쓰면 쉬움
		2015년쯤 쉽게 해준 Fetch 어쩌고가 나왔는데 그때까진 jQ로만 AJAX를 씀
		아무튼 AJAX 쓰면 자동완성, 아이디중복체크, 댓글만갱신 구현해볼수있다. 지도는..ㅎ 이미지 따와야하니 좀 힘들고
		AJAX로 많은 기능을 만들어보자
		--%>
		
		우리가 그동안 개발했던 방식은 동기방식
		
		동기방식 :
		1. 사용자가 버튼 클릭
		2. 서버가 요청을 받고 전체 HTML데이터를 응답
		3. 브라우저가 전체 페이지(header부터 footer까지 전체 다시 만들어냄) 다시 로딩 -> 깜빡임
		(화면 만드는거 렌더링이라고함, 위에서부터 아래로 렌더링한다, 브라질 웹사이트쯤 가면 깜빡임 아주 잘느껴짐)
		(비동기통신은 바뀌는 부분과 그대로인 부분이 존재함, 화면 전체가 바뀌지는 않는다)
		
		비동기방식 :
		1. 사용자가 버튼 클릭
		2. JavaScript를 이용해서 데이터만 서버로 띡 전송
		3. 서버는 JSON/XML 데이터만 응답
		4. JavaScript를 이용해서 필요한 부분만 갱신 -> 부드럽고, 빠름(전체를 다시 만들어내는게 아님)
		(인스타하는데 스크롤을 내림, 계속내림, 또내림, 쭉쭉내림, 계속나옴 어떻게한거임? DB갔다오면 깜빡해야하는디? 유튜브도 더보기 계속나옴, 갔다와야 화면에 깜빡이고 나오는데 어떻게한거야?)
		(AJAX가 나오기 전에 HTML을 책처럼 넘겼다면 AJAX로는 부드럽게 가능, 웹에서도 클라이언트 프로그램 해둔것처럼 -> 사용자경험이 좋아진다, 솔직히 그것뿐이지만 사람들이 좋아하니까)
		
		<hr>
		
		<h3>AJAX 장단점</h3>
		
		장점 : 사용자 경험(U.X) 향상(화면이 부드럽고, 깜빡거리지않음)
			  서버 부하 감소(데이터만 보냄, 원래는 html을 다 보내줘야함)
			  (네이버로 구경할수있다, 아이디중복체크하려면 서버로 요청보내고 있음, joinAjax?이걸로 입력한 id를 보내버림, 서버가 보낸 것은 NNNNN, 중복 안된거 쓰니 NNNNY로 응답이온다, 나머지는 CSS로 부여됨)
			  (원래 화면 띄우려면 jsp로 왕창보내는데 AJAX는 저만큼만 보내네 쩐다)
			  네트워크 트래픽 절약
			  (한 화면을 보여주기 위해 받아야할 데이터가 많다)
			  실시간성 구현 가능(진짜 실시간은 아니고 실시간처럼)
			  
		단점 : SEO 취약(search engine optimization, html은 검색잘되는데 AJAX는 데이터만 왔다갔다하니까 노출이 잘 안됨)
			  (에어비엔비 검색으로 받아오는건 검색엔진에서 보기힘들다)
			  브라우저 히스토리 관리 복잡(시크릿탭은 좀 가능)
			  JavaScript 의존성(JS없으면 못써버림)
			  보안 취약점 증가 (XSS)
			  
		SPA(Single Page Application) 전성시대
		요새는 jsp 방식을 참을 수 없다네요, 선택의 여지가 없음
		React, Vue, Angular로 화면을 만드는데, 얘네 꼭 AJAX가 들어감 => AJAX기반 라이브러리 및 프레임워크
		우리 React 해야해서 AJAX 꼭해야함
		이걸 다양하게 써보기위해서 XML안하고(구닥다리)
		jQuery, Fetch API, React 쓸때의 엑시오스라이브러리? 이거 세개로 AJAX 써보자
	</pre>
	
	<%-- 공부할거 하나더 추가 --%>
	<h2>JSON</h2>
	
	<pre>
	
	</pre>

</body>
</html>
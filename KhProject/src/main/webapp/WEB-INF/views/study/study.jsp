<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>AJAX</title>

  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css">
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"></script>

</head>
<body>

	<h1>AJAX</h1>
	
	<h2>아주중요!!! 별이 다섯개!!! ★★★★★</h2>
	
	<pre>
		AJAX == Asynchronous JavaScript And XML
		비동기식 자바스크립트와 XML
		(Synchronous면 동기식)
		
		"페이지를 새로고침 하지않고 서버와 데이터를 주고받을 수 있는 기술"
		"비동기 통신"
		(여태 사용한 a태그, form태그, location.href 전부 동기식 통신, 요청, 서버와 동기화시켜서 작업을 처리함)
		(화면이 깜빡이지 않고 부드럽게~ 통신하고 일부만 변경됨, 좋은 점은 사용자경험(User Experience, UX) 향상)
		<%-- 한 2000년만 해도 화면이 렌더링도 느리고 progress bar가 진행되면서 다 뜰때까지 기다려야하고 아무것도 못했음, 한줄씩 나온다 위에서부터 렌더링하니까
		사용자경험이 좋지않음, 하염없이 기다림, 불편해서 바로바로 안되니까 마이크로소프트가 내놓은게 액티브 X, 비동기통신의 시초
		그때만해도 ajax 유행이 안되다가 5, 6년 지나서 구글이 낸게 google map을 내놓았다(2005 ~ 2006)
		이것때문에 전세계 웹개발자가 허거덩, 마우스 눌러서 하는거 전부 select, db에서 조회하기, url로 요청보내서 응답받고 화면에 뿌려야하는데 그냥 끌어다놓고 클릭만으로도 바뀌어버림
		이거 내면서 자동완성을 구글이 낸것, 이것도 select임 자기네들 키워드 들어있는것 보여주는거
		Active X 안쓰고 AJAX 썼다고 해서 전세계가 미추어버린것, 이 이후로 브라우저 점유율도 바뀌고...
		AJAX는 그래도 일반 개발자들이 쓰기 어려운 기술이었다(2005년에 나왔음)
		근데 2006년에 jQuery가 나와버림, 존 레식씨가 AJAX를 쓰기 쉽게 만들어버림, jQ인기도 AJAX때문이라고 할수도있음...
		너도나도쓰자해서 2008년도에 HTML5에 AJAX를 포함시켜버림, 근데 문법이 어려움, jQ로 쓰면 쉬움
		2015년쯤 쉽게 해준 Fetch 어쩌고가 나왔는데 그때까진 jQ로만 AJAX를 씀
		아무튼 AJAX 쓰면 자동완성, 아이디중복체크, 댓글만갱신 구현해볼수있다. 지도는..ㅎ 이미지 따와야하니 좀 힘들고
		AJAX로 많은 기능을 만들어보자
		--%>
		
		우리가 그동안 개발했던 방식은 동기방식
		
		동기방식 :
		1. 사용자가 버튼 클릭
		2. 서버가 요청을 받고 전체 HTML데이터를 응답
		3. 브라우저가 전체 페이지(header부터 footer까지 전체 다시 만들어냄) 다시 로딩 -> 깜빡임
		(화면 만드는거 렌더링이라고함, 위에서부터 아래로 렌더링한다, 브라질 웹사이트쯤 가면 깜빡임 아주 잘느껴짐)
		(비동기통신은 바뀌는 부분과 그대로인 부분이 존재함, 화면 전체가 바뀌지는 않는다)
		
		비동기방식 :
		1. 사용자가 버튼 클릭
		2. JavaScript를 이용해서 데이터만 서버로 띡 전송
		3. 서버는 JSON/XML 데이터만 응답
		4. JavaScript를 이용해서 필요한 부분만 갱신 -> 부드럽고, 빠름(전체를 다시 만들어내는게 아님)
		(인스타하는데 스크롤을 내림, 계속내림, 또내림, 쭉쭉내림, 계속나옴 어떻게한거임? DB갔다오면 깜빡해야하는디? 유튜브도 더보기 계속나옴, 갔다와야 화면에 깜빡이고 나오는데 어떻게한거야?)
		(AJAX가 나오기 전에 HTML을 책처럼 넘겼다면 AJAX로는 부드럽게 가능, 웹에서도 클라이언트 프로그램 해둔것처럼 -> 사용자경험이 좋아진다, 솔직히 그것뿐이지만 사람들이 좋아하니까)
		
		<hr>
		
		<h3>AJAX 장단점</h3>
		
		장점 : 사용자 경험(U.X) 향상(화면이 부드럽고, 깜빡거리지않음)
			  서버 부하 감소(데이터만 보냄, 원래는 html을 다 보내줘야함)
			  (네이버로 구경할수있다, 아이디중복체크하려면 서버로 요청보내고 있음, joinAjax?이걸로 입력한 id를 보내버림, 서버가 보낸 것은 NNNNN, 중복 안된거 쓰니 NNNNY로 응답이온다, 나머지는 CSS로 부여됨)
			  (원래 화면 띄우려면 jsp로 왕창보내는데 AJAX는 저만큼만 보내네 쩐다)
			  네트워크 트래픽 절약
			  (한 화면을 보여주기 위해 받아야할 데이터가 많다)
			  실시간성 구현 가능(진짜 실시간은 아니고 실시간처럼)
			  
		단점 : SEO 취약(search engine optimization, html은 검색잘되는데 AJAX는 데이터만 왔다갔다하니까 노출이 잘 안됨)
			  (에어비엔비 검색으로 받아오는건 검색엔진에서 보기힘들다)
			  브라우저 히스토리 관리 복잡(시크릿탭은 좀 가능)
			  JavaScript 의존성(JS없으면 못써버림)
			  보안 취약점 증가 (XSS)
			  
		SPA(Single Page Application) 전성시대
		요새는 jsp 방식을 참을 수 없다네요, 선택의 여지가 없음
		React, Vue, Angular로 화면을 만드는데, 얘네 꼭 AJAX가 들어감 => AJAX기반 라이브러리 및 프레임워크
		우리 React 해야해서 AJAX 꼭해야함
		이걸 다양하게 써보기위해서 XML안하고(구닥다리)
		jQuery, Fetch API, React 쓸때의 엑시오스라이브러리? 이거 세개로 AJAX 써보자
	</pre>
	
	<%-- 공부할거 하나더 추가 --%>
	<h2>JSON</h2>
	<%-- AJAX부터 봐야함 AJAX에서 이상한부분? 어색한부분? XML이 이상함, 얘가 왜 끼어있을까?
	옛날에 액티브X할때 XML을 주고받음, SOAP방식
	예를들어서 네이버 댓글이라면? 닉네임(아이디) + 댓글 + 댓글 개수 + 따봉개수 + 야유개수 -> 이걸 서버에서 보내줬으니 화면에 출력되겠지
	이걸 XML 데이터로 보내려면 서버가 만들어야하는 데이터는
	--%>
	<pre>
	
		<reply>
			<nickName>홍길동</nickName>
			<id>hong</id>
			<content>아하하 인천의 전사독 너무 재밌고</content>
			<reply></reply>
			<tabom>2</tabom>
			<uuuuu>1</uuuuu>
		</reply>
		<%-- 이런식으로 받고 출력함 --%>
		(구세대 방식)
		
		<%-- 더글라스 크락포드 아저씨가 XML 너무 불편해 쓰기싫어 어떻게 안되나 열받아 해서 JSON을!
		이 아저씨가 JS도 같이 개발했던 아저씨
		자바스크립트에 객체가 있는데, 이런 구세대 방식으로 안보내고 자바스크립트 객체처럼 보내면 좋을것같은데? 하고 아이디어를 냄
		XML 불편하니까 자바스크립트 모양으로 만들면 편할것같다!
		--%>
		
		reply = {
			"nickName" : "홍길동",
			"id" : "hong",
			"content" : "아하하 인천의 전사독 너무 재밌고",
			reply : [],
			tabom : 2,
			uuuuu : 1
		}
		(표준 방식)
		<%-- 이아저씨가 이런말해도 인기없다가 구글이 구글맵내고, JSON으로 했다고 하니까 개발자들이 너도나도 이렇게 쓰기시작함 --%>
		<%-- 2005년에 이렇게 쓰기시작하다 아예 2006년에 표준으로 등재해버림, 2013년에는 아예 국제표준으로 승인이 나버림, 데이터를 보내는 형태 현시대의 (전송)표준 --%>
		
		JSON == JavaScript Object Notation
		<%-- 처음부터 서버에서 이렇게 보내면 개체명 참조연산자 속성명으로 값뽑기 가능, 자바스크립트 객체같은 모양이라는 뜻 --%>
		"사람이 읽기 쉽고, 기계가 파싱하기 쉬운 데이터 교환 형식"
		텍스트 기반이라 아주 가볍다
		
		진짜로 자바스크립트 객체 XXXXXXXXXXX 자바스크립트 객체 모양으로 문자열을 만든것
		
		문자열 데이터! 조심해야함
		문법이 아주 엄격함!! 자바스크립트 객체
		{
			name : "홍길동", 		// 키에 따옴표 없음 가능
			address : '서울',		// 작은 따옴표 사용 가능
			age : 15,			// 마지막 속성값에 컴마 가능
		}
		
		근데 제이슨에서 이거 이렇게 하면 난리남 와장창
		
		JSON 형식
		{
			"name" : "홍길동",
			"address" : "서울",
			"age" : 15
		}
		
		마지막에 콤마 있으면 안되고, 키나 속성값에 쌍따옴표만 써야하고 생략도 안됨, 정수는 쌍따옴표 없어도됨
		
		네이버 댓글 새로고치면 요청 보내는데, 열어보면 데이터 10개를 자바스크립트 객체로 만들어 보내고 있음
		실질적으로 읽어오는 댓글 요청은 topCount로 15를 보내고있음
		이걸로 받은 데이터는 0부터 14로 오니 15개가 왔다! 배열 0번 열어보니 댓글창에 보이는 데이터 다 들어있음
		따봉개수 dislike개수도 서버에서 DB가서 select해온걸로 보여주고있음
		우리 다 한거다 create element, append 이런걸로 AJAX 써서 할수있음
		서버에서 응답한 형태 key에 ""붙어있음, JSON데이터임을 알 수 있다
		
		이친구도 장단점있음
		장점 :
		가독성이 뛰어남(XML과 비교해서 훨씬 읽기 쉬움)
		데이터 자체가 가볍다.(여닫는 태그 필요없어 XML대비해서 30%더 가벼움)
		XML대비 브라우저의 파싱 속도 빠름
		언어 독립적(자바에서도, C, C++에서 JSON 활용가능하도록 모든언어에서 지원해줌)
		순수 JavaScript로 다룰 수 있음, 네이티브 지원
		
		단점 :
		주석 불가
		날짜 타입 없음(문자열로 처리)
		함수 불가능
	
		장점이 어마어마하다, 네이버 댓글도 그렇고 애플도 key에 쌍따옴표, value에 쌍따옴표 이러면 다 JSON
		화면상 데이터를 전부 JSON으로 만들어서 보내버렸다
		상세조회정보도 DB에 넣어둔것을 a태그로 만들어서 뿌린것
		삼성도 마찬가지겠지? config 파일도 JSON, 뭐에 쓰는지 모르겠는데 보면 JSON으로 다 써뒀음
		
		웹개발의 표준!!! 데이터 형식
		REST API의 기본 포맷!!!!!
		옛날 설정파일 XML -> JSON (설정파일은 YAML이 인기 더 많음, 더 쉽게 생김, YML이라고 써도된다, 옛날 윈도우 확장자 최대 세글자라 이래썼고 같은말임)
		
		아무튼 AJAX와 AJAX로 주고받을 JSON에 대해서도 얘기했다
		근데 자바에서 자체지원해주는건 아니라 JSON으로 만들어 보내면 반복, if문 써야해서
		쉽게 쓸 라이브러리를 미리 추가한것
		json-simple-1.1.1.jar 이게 자바에서 쓸때 사용하는, 구글에서 만들어 제공하는것
		구글이 사람들이 불편하다고 해서 더쉽게 쓰게 제공해준게 gson-2.8.2.jar(구글이 만든 JSON이라 gson)
	</pre>
	
	<pre>
		우리는 AJAX를 이용해서 아이디 중복체크 기능을 구현해볼 예정
		근데 시간이 애매해서 그냥 다음주에 댓글까지 하겠음 아이디 중복체크 + 댓글 기능
		
		AJAX 사용방법
		
		1. XMLHttpRequest 객체 만들어 사용하기			-
		2. jQuery 사용해서 ajax메소드 호출하기			+
		3. fetch API 활용해서 fetch 호출하기			+
		4. React배울 때 Axios 라이브러리 설치해서 사용하기	+
		
		너무많이 사용되고 사랑받은 기술이라 234 다 알아야할듯
	</pre>
	
	<pre>
		* jQuery를 사용한 AJAX 통신
		
		[ 표현법 ]
		
		jQuery쓸때 달러기호는 사실 변수
		jQuery(document).ready.function({})
		
		아무튼 얘를 가지고 메소드 호출, 요청 시 전달값(속성)을 보낼 게 많다, 폼태그 요청도 action 속성에 url, method에 방식, 전달값 등
		자바스크립트에서 다뤄야하는 값이 많다면?
		// 자바스크립트에서 값 여러 개 다룰때 ~ 사용하는거 ~
		// 1. 배열 | 2. 객체
		배열은 순서보장됨, index 있음
		객체는 key-value를 세트로 묶음, 순서 보장은 안됨, 속성명으로 다룰 수 있음
		
		$.ajax({
			속성명 : 값,
			속성명 : 값,
			속성명 : 값,
			...
		}); =======> 4일동안 숙제 : Web으로 CRUD구현 + 인터페이스 / 다형성 / J.S 복습
		
		일반적으로 jQuery로 AJAX를 쓴다면 주요 속성이 있음, 나머지는 찾아쓰시고
		* 주요 속성
		
		- url : 요청할 URL(필수로 작성) => form태그의 action속성
		- type : 요청 전송방식(GET/POST... FETCH, PUT, DELETE, OPTION...)
				 => form태그의 method속성
		- data : 요청 시 전달값({키 : 밸류, 키 : 밸류}) => form태그의 input요소 value값
		- success : 통신 성공 시 실행할 콜백함수를 정의
		--------------------------------------------------
		- error : 통신 실패 시 실행할 콜백함수를 정의
		- complete : 성공하든 실패하든 무조건 끝나면 실행할 콜백함수를 정의
	</pre>
	
	<%-- jQuery CDN 방식으로 가져올 스크립트 태그 작성먼저 해야함, header.jsp에서 11~14행 복사해옴 --%>
	
	<h2>jQuery를 사용한 AJAX요청 및 응답</h2>
	
	<h3>1. 버튼을 클릭하여 서버에 데이터틀 전송하고 단순 문자열 데이터 응답받기</h3>
	
	<div class="form-group">
		<div class="form-control">
			<%-- 입력값을 받아서 사용하기 위해 id 속성값 부여 --%>
			입력 : <input type="text" id="input1" />
		</div>
		<div class="form-control">
			<%-- 버튼 선택을 위한 id도 추가로 부여함 --%>
			<button class="btn btn-sm btn-primary" id="btn1">요청보내기!</button>
		</div>
	</div>
	
	<%-- 돌아올 응답을 출력할 라벨 요소 --%>
	응답 : <label id="output1">현재 응답 없음</label>
	
	<script>
		
		// 요청 보내기 버튼을 클릭하면!
		$('#btn1').click(function() {
			
			// 동기식 요청
			// location.href = "ajax1.do?input1=머시기";
			
			// 비동기식 요청(jQuery버전)
			$.ajax({
				
				url : "ajax1.do", // 요청 보낼 URL 속성 -> 이것을 서블릿 매핑값으로 작성한다
				type : "get",
				data : {
					value : $("#input1").val() // 내가 input요소에 적은 key를 뭐라고 할건지 적고, 속성값을 가져옴
				},
				
				// 이 이후에는 성공시 요청처리, 실패시 요청처리, 통신 종료 시 요청처리 내용을 기술
				success : function() {
					
					// 서버로 요청을 보내서 응답도 잘 돌아왔다, 통신에 성공했을 때 어떤 작업을 처리할지
					console.log("AJAX요청 성공 !");
					
				},
				
				// 실패 시 할 일
				error : function() {
					console.log("AJAX요청 실패 !");
				},
				
				// 성공실패 상관없이 무조건 할 일
				complete : function() {
					console.log("나는 무조건함!!!");
				}
				
				// 지금은 ajax1.do 매핑값을 가진 서블릿이 없으므로 404가 돌아올것임 -> 200, 201이 아님
				// 브라우저 개발자도구의 console에 error가 호출된다, 그리고 complete도 호출되었음
				
				// 이제 실질적으로 ajax 요청을 받아서 처리할 서블릿을 생성하자
				
			});
			
		});
	
	</script>

</body>
</html>